<?php

namespace MageSuite\LowestPriceLogger\Test\Integration;

class LogLowestPriceFromFrontendTest extends \Magento\TestFramework\TestCase\AbstractController
{
    protected ?\Magento\Framework\App\ObjectManager $objectManager;
    protected ?\MageSuite\LowestPriceLogger\Model\ResourceModel\PriceHistoryLog $priceHistoryLog;
    protected ?\Magento\Catalog\Api\ProductRepositoryInterface $productRepository;
    protected ?GetCurrentDateFake $getCurrentDateFake;
    protected ?\Magento\Store\Model\WebsiteFactory $websiteFactory;

    public function setUp(): void
    {
        parent::setUp();

        $this->objectManager = \Magento\TestFramework\ObjectManager::getInstance();
        $this->getCurrentDateFake = new GetCurrentDateFake();
        $this->objectManager->addSharedInstance($this->getCurrentDateFake, \MageSuite\LowestPriceLogger\Model\GetCurrentDate::class);
        $this->priceHistoryLog = $this->objectManager->get(\MageSuite\LowestPriceLogger\Model\ResourceModel\PriceHistoryLog::class);
        $this->productRepository = $this->objectManager->get(\Magento\Catalog\Api\ProductRepositoryInterface::class);
        $this->websiteFactory = $this->objectManager->create(\Magento\Store\Model\WebsiteFactory::class);

        $this->priceHistoryLog->cleanTable();
    }

    /**
     * @magentoDbIsolation disabled
     * @magentoAppIsolation enabled
     * @magentoConfigFixture default/catalog/price/scope 1
     * @magentoDataFixture MageSuite_LowestPriceLogger::Test/Integration/_files/product.php
     */
    public function testItLogsPricesFromDifferentWebsites()
    {
        $this->getCurrentDateFake->setValue('2022-08-01');
        $product = $this->productRepository->get('simple');

        $this->dispatch('catalog/product/view/id/'.$product->getId());

        $priceHistory = $this->priceHistoryLog->getPriceHistory([$product->getId()], 1, 0);

        $this->assertEquals(10, $priceHistory[0]['price']);
        $this->assertEquals('2022-08-01', $priceHistory[0]['log_date']);
        $this->assertEquals(0, $priceHistory[0]['was_autogenerated_by_cron']);
    }

    /**
     * @magentoDbIsolation disabled
     * @magentoCache all disabled
     * @magentoAppIsolation enabled
     * @magentoConfigFixture default/catalog/price/scope 1
     * @magentoDataFixture MageSuite_LowestPriceLogger::Test/Integration/_files/product.php
     */
    public function testItOnlyLogsChangesBetweenDays()
    {
        $product = $this->productRepository->get('simple', true, 0, true);
        $product->setPrice(10.00);
        $this->productRepository->save($product);

        $this->getCurrentDateFake->setValue('2022-08-02');
        $this->dispatch('catalog/product/view/id/'.$product->getId());

        $this->getCurrentDateFake->setValue('2022-08-03');
        $this->dispatch('catalog/product/view/id/'.$product->getId());

        $priceHistory = $this->priceHistoryLog->getPriceHistory([$product->getId()], 1, 0);

        $this->assertCount(1, $priceHistory);
        $this->assertEquals(10, $priceHistory[0]['price']);
        $this->assertEquals('2022-08-02', $priceHistory[0]['log_date']);
    }

    /**
     * @magentoDbIsolation disabled
     * @magentoAppIsolation enabled
     * @magentoConfigFixture default/catalog/price/scope 1
     * @magentoDataFixture MageSuite_LowestPriceLogger::Test/Integration/_files/product_with_catalog_rule.php
     */
    public function testItLogsCatalogRulePrice()
    {
        $this->getCurrentDateFake->setValue('2022-08-02');
        $product = $this->productRepository->get('simple');
        $this->dispatch('catalog/product/view/id/'.$product->getId());

        $priceHistory = $this->priceHistoryLog->getPriceHistory([$product->getId()], 1, 0);

        $this->assertEquals(10, $priceHistory[0]['price']);
        $this->assertEquals('2022-08-02', $priceHistory[0]['log_date']);
        $this->assertEquals(8.50, $priceHistory[1]['price']);
        $this->assertEquals('2022-08-02', $priceHistory[1]['log_date']);
    }

    public function tearDown(): void
    {
        $this->priceHistoryLog->cleanTable();
    }

    public function getDefaultWebsiteId()
    {
        $website = $this->websiteFactory->create();
        $website->load('default', 'code');
        return $website->getId();
    }
}
